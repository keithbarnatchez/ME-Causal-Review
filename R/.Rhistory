calc_stats <- function(data,methods,a,s) {
#' Calculates stats of interest for specified correction methods and updates
#' existing dataframe containing stats across simulation iterations
#'
#' INPUTS:
#' - data:
#' - methods:
#' - simstats:
#' - t:
#' - s:
#' OUTPUTS:
#' - updated simstats dataframe
#'
# Ideal and naive
ATE_ideal <- ate_ideal(data) ; ATE_naive <- ate_naive(data)
bias_ideal <- ATE_ideal-a ; bias_naive <- ATE_naive-a
stats <- data.frame(bias=bias_ideal,ATE=ATE_ideal,method='Ideal',iteration=s)
stats <- rbind(stats, data.frame(bias=bias_naive,ATE=ATE_naive,method='Naive',iteration=s))
# SIMEX
if ('simex_ind' %in% methods) {
# Get ATE estimate
ATE <- simex_indirect(data)
# Get bias
bias <- ATE-a
stats <- rbind(stats, data.frame(bias=bias,ATE=ATE,method='simex_ind',iteration=s))
}
# PSC
if ('psc' %in% methods) {
# Get ATE estimate
ATE <- psc(data)
bias <- ATE-a
stats <- rbind(stats, data.frame(bias=bias,ATE=ATE,method='psc',iteration=s))
}
# IV
if ('iv' %in% methods) {
# Get ATE estimate
ATE <- iv_confounder(data)
bias <- ATE-a
stats <- rbind(stats, data.frame(bias=bias,ATE=ATE,method='iv',iteration=s))
}
return(stats)
}
t
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
source('output_functions.R')
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
source("~/Documents/research/ME-Causal-Review/R/testing.R", echo=TRUE)
ate_iv <- iv_confounder(data) # IV
library(AEA)
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
source('data_functions.R')
source('output_functions.R')
# Simulation code
n <- 10000 # obs
# Generate the data
data <- generate_data(n,sig_u = 0.2)
data_imp <- data %>% mutate(X=replace(X,v_idx==0,NA)) %>%
select(-v_idx)
# Get IPW from different approaches
ate_psc <- psc(data) # propensity score calibration
ate_iv <- iv_confounder(data) # IV
ate_mime <- mime(data)
ate_iv <- iv_confounder(data) # IV
library(AEA)
install.packages('AEA')
install.packages('BEA')
library(AER)
ate_iv <- iv_confounder(data) # IV
ate_mime <- mime(data)
methods <- c('iv','mime')
sig_u_grid <- c(0.1,0.2,0.3) ; ba_grid <- c(1,2) ; n_grid <- c(100,1000,5000)
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
op_chars <- traceback(get_results(methods,sig_u_grid,ba_grid,n_grid))
scen_df <- expand.grid(sig_u = sig_u_grid, ba = ba_grid, n = n_grid,
KEEP.OUT.ATTRS = TRUE, stringsAsFactors = FALSE)
scen_list <- split(scen_df, seq(nrow(scen_df)))
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
print('g')
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
nsim=100
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
print('g')
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
print('g')
return(op_tmp)
}, methods = methods, nsim = nsim)
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
print(u)
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
get_stats_table <- function(methods,
u,a,n,
nsim) {
#' For a given iteration, calculates the following stats of interest:
#' - bias, variance, CI coverage
#' These stats are used to calculate the operating characteristics (across
#' all iterations) described in get_results.
#'
#' INPUTS:
#' - methods:
#' - v_idx:
#' - u,tn,:
#' - nsim: Number of iterations
#'
#' OUTPUTS:
#' A dataframe with the following variables:
#'     -
#'     -
#'     -
#'     -
#'     -
#'     -
print(45)
# set up dataframe for calculating operating characteristics by group
sim_stats_list <- lapply(1:nsim, function(s, n, u, a, ...) {
# simulate data for current iteration
data <- generate_data(n,sig_u=u,ba=a)
# Calculate stats of interest (e.g. bias, whether CI covers true param val, etc)
return(calc_stats(data,methods,a,s))
}, n = n, u = u, a = a) # for s in 1:nsim
sim_stats <- do.call(rbind, sim_stats_list)
# Compute avg operating characteristics from stats of interest
final_stats <- sim_stats %>% group_by(method) %>%
summarize(bias = mean(bias),
mse = mean(bias^2),
ATE = mean(ATE))
final_stats$u=u ; final_stats$a=a ; final_stats$n=n
return(final_stats)
} # calc_stats
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
get_stats_table <- function(methods,
u,a,n,
nsim) {
#' For a given iteration, calculates the following stats of interest:
#' - bias, variance, CI coverage
#' These stats are used to calculate the operating characteristics (across
#' all iterations) described in get_results.
#'
#' INPUTS:
#' - methods:
#' - v_idx:
#' - u,tn,:
#' - nsim: Number of iterations
#'
#' OUTPUTS:
#' A dataframe with the following variables:
#'     -
#'     -
#'     -
#'     -
#'     -
#'     -
# set up dataframe for calculating operating characteristics by group
sim_stats_list <- lapply(1:nsim, function(s, n, u, a, ...) {
# simulate data for current iteration
data <- generate_data(n,sig_u=u,ba=a)
# Calculate stats of interest (e.g. bias, whether CI covers true param val, etc)
return(calc_stats(data,methods,a,s))
}, n = n, u = u, a = a) # for s in 1:nsim
sim_stats <- do.call(rbind, sim_stats_list)
print(sim.stats)
# Compute avg operating characteristics from stats of interest
final_stats <- sim_stats %>% group_by(method) %>%
summarize(bias = mean(bias),
mse = mean(bias^2),
ATE = mean(ATE))
final_stats$u=u ; final_stats$a=a ; final_stats$n=n
return(final_stats)
} # calc_stats
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
get_stats_table <- function(methods,
u,a,n,
nsim) {
#' For a given iteration, calculates the following stats of interest:
#' - bias, variance, CI coverage
#' These stats are used to calculate the operating characteristics (across
#' all iterations) described in get_results.
#'
#' INPUTS:
#' - methods:
#' - v_idx:
#' - u,tn,:
#' - nsim: Number of iterations
#'
#' OUTPUTS:
#' A dataframe with the following variables:
#'     -
#'     -
#'     -
#'     -
#'     -
#'     -
# set up dataframe for calculating operating characteristics by group
sim_stats_list <- lapply(1:nsim, function(s, n, u, a, ...) {
print(ba)
# simulate data for current iteration
data <- generate_data(n,sig_u=u,ba=a)
# Calculate stats of interest (e.g. bias, whether CI covers true param val, etc)
return(calc_stats(data,methods,a,s))
}, n = n, u = u, a = a) # for s in 1:nsim
sim_stats <- do.call(rbind, sim_stats_list)
# Compute avg operating characteristics from stats of interest
final_stats <- sim_stats %>% group_by(method) %>%
summarize(bias = mean(bias),
mse = mean(bias^2),
ATE = mean(ATE))
final_stats$u=u ; final_stats$a=a ; final_stats$n=n
return(final_stats)
} # calc_stats
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
get_stats_table <- function(methods,
u,a,n,
nsim) {
#' For a given iteration, calculates the following stats of interest:
#' - bias, variance, CI coverage
#' These stats are used to calculate the operating characteristics (across
#' all iterations) described in get_results.
#'
#' INPUTS:
#' - methods:
#' - v_idx:
#' - u,tn,:
#' - nsim: Number of iterations
#'
#' OUTPUTS:
#' A dataframe with the following variables:
#'     -
#'     -
#'     -
#'     -
#'     -
#'     -
# set up dataframe for calculating operating characteristics by group
sim_stats_list <- lapply(1:nsim, function(s, n, u, a, ...) {
# simulate data for current iteration
data <- generate_data(n,sig_u=u,ba=a)
print(data)
# Calculate stats of interest (e.g. bias, whether CI covers true param val, etc)
return(calc_stats(data,methods,a,s))
}, n = n, u = u, a = a) # for s in 1:nsim
sim_stats <- do.call(rbind, sim_stats_list)
# Compute avg operating characteristics from stats of interest
final_stats <- sim_stats %>% group_by(method) %>%
summarize(bias = mean(bias),
mse = mean(bias^2),
ATE = mean(ATE))
final_stats$u=u ; final_stats$a=a ; final_stats$n=n
return(final_stats)
} # calc_stats
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
source("~/Documents/research/ME-Causal-Review/R/output_functions.R", echo=TRUE)
source("~/Documents/research/ME-Causal-Review/R/output_functions.R", echo=TRUE)
source("~/Documents/research/ME-Causal-Review/R/output_functions.R", echo=TRUE)
source("~/Documents/research/ME-Causal-Review/R/output_functions.R", echo=TRUE)
# --------------------------
# CAUSAL-ME OUTPUT FUNCTIONS
# --------------------------
#
# - percent bias
# - rmse
# - effect estimate
# - ATE variance
#
#
#
calc_stats <- function(data,methods,a,s) {
#' Calculates stats of interest for specified correction methods and updates
#' existing dataframe containing stats across simulation iterations
#'
#' INPUTS:
#' - data:
#' - methods:
#' - simstats:
#' - t:
#' - s:
#' OUTPUTS:
#' - updated simstats dataframe
#'
# Ideal and naive
ATE_ideal <- ate_ideal(data) ; ATE_naive <- ate_naive(data)
bias_ideal <- ATE_ideal-a ; bias_naive <- ATE_naive-a
stats <- data.frame(bias=bias_ideal,ATE=ATE_ideal,method='Ideal',iteration=s)
stats <- rbind(stats, data.frame(bias=bias_naive,ATE=ATE_naive,method='Naive',iteration=s))
print('g')
# SIMEX
if ('simex_ind' %in% methods) {
# Get ATE estimate
ATE <- simex_indirect(data)
# Get bias
bias <- ATE-a
stats <- rbind(stats, data.frame(bias=bias,ATE=ATE,method='simex_ind',iteration=s))
}
# PSC
if ('psc' %in% methods) {
# Get ATE estimate
ATE <- psc(data)
bias <- ATE-a
stats <- rbind(stats, data.frame(bias=bias,ATE=ATE,method='psc',iteration=s))
}
# IV
if ('iv' %in% methods) {
# Get ATE estimate
ATE <- iv_confounder(data)
bias <- ATE-a
stats <- rbind(stats, data.frame(bias=bias,ATE=ATE,method='iv',iteration=s))
}
return(stats)
}
get_stats_table <- function(methods,
u,a,n,
nsim) {
#' For a given iteration, calculates the following stats of interest:
#' - bias, variance, CI coverage
#' These stats are used to calculate the operating characteristics (across
#' all iterations) described in get_results.
#'
#' INPUTS:
#' - methods:
#' - v_idx:
#' - u,tn,:
#' - nsim: Number of iterations
#'
#' OUTPUTS:
#' A dataframe with the following variables:
#'     -
#'     -
#'     -
#'     -
#'     -
#'     -
# set up dataframe for calculating operating characteristics by group
sim_stats_list <- lapply(1:nsim, function(s, n, u, a, ...) {
# simulate data for current iteration
data <- generate_data(n,sig_u=u,ba=a)
# Calculate stats of interest (e.g. bias, whether CI covers true param val, etc)
return(calc_stats(data,methods,a,s))
}, n = n, u = u, a = a) # for s in 1:nsim
sim_stats <- do.call(rbind, sim_stats_list)
# Compute avg operating characteristics from stats of interest
final_stats <- sim_stats %>% group_by(method) %>%
summarize(bias = mean(bias),
mse = mean(bias^2),
ATE = mean(ATE))
final_stats$u=u ; final_stats$a=a ; final_stats$n=n
return(final_stats)
} # calc_stats
get_results <- function(methods,
sig_u_grid,
ba_grid,
n_grid,
nsim=100) {
#' Function for computing results of chosen ME-correction approaches, with
#' varying data parameters
#'
#' INPUTS:
#' - methods: Vector of strings for desired ME-correction methods to implement
#'    - psc: Propensity score calibration (Sturmer 2005)
#'    - simex_ind: Indirect Simex (Kyle et al. 2016)
#'    - iv: Instrumental variables
#'  - sig_u_grid: Vector of values for measurement error variance
#'
#' OUTPUTS:
#' - A dataframe containing calculated operating characteristics for
#'   each method and parameter combination (e.g. a given row will contain info
#'   on the avg percent bias, mse, 95% CI coverage, etc for a specific correction
#'   method and specific values of sig_u, ba, n, etc)
# Initialize dataframe for each stat of interest
scen_df <- expand.grid(sig_u = sig_u_grid, ba = ba_grid, n = n_grid,
KEEP.OUT.ATTRS = TRUE, stringsAsFactors = FALSE)
scen_list <- split(scen_df, seq(nrow(scen_df)))
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
op_chars <- do.call(rbind, op_list)
return(op_chars)
} # get_results
bias_plot <- function(results) {
results %>% ggplot(aes(x=bias))
}
op_list <- lapply(scen_list, function(scen, methods, nsim, ...) {
u <- scen$sig_u
a <- scen$ba
n <- scen$n
# Get operating characteristics for current grid point
op_tmp <- get_stats_table(methods,u,a,n,nsim)
return(op_tmp)
}, methods = methods, nsim = nsim)
options(error = function(){.rs.recordTraceback(TRUE)})
op_chars <- traceback(get_results(methods,sig_u_grid,ba_grid,n_grid))
options(error = traceback)
traceback(get_results(methods,sig_u_grid,ba_grid,n_grid))
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
op_chars <- traceback(get_results(methods,sig_u_grid,ba_grid,n_grid))
lm(Y ~ A, weights=w_hat,data=data)$coefficients[2]
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
op_chars <- traceback(get_results(methods,sig_u_grid,ba_grid,n_grid))
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
op_chars <- traceback(get_results(methods,sig_u_grid,ba_grid,n_grid))
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
options(error = NULL)
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
source('output_functions.R')
source('output_functions.R')
source('output_functions.R')
source('output_functions.R')
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
source('output_functions.R')
source('output_functions.R')
source('output_functions.R')
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
source('output_functions.R')
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
View(op_chars)
source('output_functions.R')
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
sig_u_grid <- c(0.1,0.2,0.3) ; ba_grid <- c(1,2) ; n_grid <- c(1000)
options(error = NULL)
options(error = function(){.rs.recordTraceback(TRUE)})
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
View(op_chars)
methods <- c('iv','mime')
sig_u_grid <- c(0.3,0.5,0.9) ; ba_grid <- c(1) ; n_grid <- c(1000)
options(error = NULL)
options(error = function(){.rs.recordTraceback(TRUE)})
op_chars <- get_results(methods,sig_u_grid,ba_grid,n_grid)
View(op_chars)
as.integer(0.0)==0.0
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
source('data_functions.R')
source('output_functions.R')
# Generate the data
data <- generate_data(n,sig_u = 0.2)
# Generate the data
data <- generate_data(n,sig_u = 0.2,binary=1)
source('data_functions.R')
# Generate the data
data <- generate_data(n,sig_u = 0.2,binary=1)
View(data)
# Generate the data
data <- generate_data(n,sig_u = 0.2,binary=1)
# Get IPW from different approaches
ate_psc <- psc(data) # propensity score calibration
ate_iv <- iv_confounder(data) # IV
View(ate_iv)
# Generate the data
data <- generate_data(n,sig_u = 0.2,binary=0)
data_imp <- data %>% mutate(X=replace(X,v_idx==0,NA)) %>%
select(-v_idx)
ate_iv <- iv_confounder(data) # IV
View(ate_iv)
