library(mvtnorm) # for simulating data
library(simex) # for the indirect SIMEX approach
library(tidyverse)
library(mice) # for multiple imputation
library(ipw)
library(AER) # for instrumental variables
library(betareg) # for using beta regression in PSC
library(SuperLearner)
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
source('data_functions.R')
source('output_functions.R')
# Simulation code
n <- 1e4 # obs
# Generate the data
data <- generate_data(n,sig_u = 0.3,binary=0,
ba=1)
View(data)
# Fit outcome model
rhs_vars <- data %>% select(X,A,Z)
slhat <- SuperLearner(Y=data$Y,  X=rhs_vars, family=gaussian, SL.library = 'SL.glm')$SL.predict
# Fit PS model
glmhat <- lm(Y ~ X + A + Z,data=data)$fitted.values
temp_data <- generate_data(n,sig_u = 0.1,binary=0,
rho = 0.2,n = 5000)
View(temp_data)
data <- generate_data(n,sig_u = 0.1,binary=0,
ba=1)
View(temp_data)
data <- generate_data(n,sig_u = 0.3,binary=0,
ba=100)
View(data)
data <- generate_data(n,sig_u = 0.3,binary=0,
ba=1000000)
View(data)
temp_data <- generate_data(n,sig_u = 0.1,binary=0,
rho = 0.2,n = 5000)
View(temp_data)
data <- generate_data(n,sig_u = 0.3,binary=0,
ba=1)
View(data)
temp_data <- generate_data(n,sig_u = 0.1,binary=0,
rho = 0.2,n = 5000,
ba=1)
View(temp_data)
temp_data <- generate_data(n,sig_u = 0.1,binary=0,
rho = 0.2,
ba=1)
View(temp_data)
test_dumb <- function(x, piss=2) {
return(piss)
}
test_dumb(5,2,x=8)
test_dumb(5,piss=2,x=8)
temp_data <- generate_data(n,sig_u = 0.1,binary=0,
rho = 0.2,
ba=1)
View(temp_data)
ate_simex <- simex_indirect(data,nboot=0)
ate_simex <- simex_indirect(temp_data,nboot=0)
ate_iv <- iv_confounder(temp_data)
ate_iv
ate_simex
# Run SIMEX on PS coefficient
ps_model <- glm(A ~ W + Z, data=data, family='binomial', x=TRUE)
data=temp_data
# Run SIMEX on PS coefficient
ps_model <- glm(A ~ W + Z, data=data, family='binomial', x=TRUE)
simex_model <- simex(model=ps_model,
SIMEXvariable = "W",
measurement.error = sig_u_hat)
# Estimate ME variance via the validation data (i.e. sd of X-W in val data)
# Note: should be fine to do it this way since we're assuming non-dif/classical
# but may need to explore extensions
sig_u_hat <- sd(data$X[which(data$v_idx==1)] - data$W[which(data$v_idx==1)])
View(temp_data)
simex_model <- simex(model=ps_model,
SIMEXvariable = "W",
measurement.error = sig_u_hat)
plot(simex_model)
# Get weights
e_hat <- predict(simex_model,type='response')
w_hat <- ifelse(data$A==1,
1/e_hat,
1/(1-e_hat))
# Estimate ATE
ATE_mod <- lm(Y ~ A, weights=data$w_hat,data=data)
ATE_mod
e_hat
simex_model
lm(A ~ X + Z, data=data)
ate_mime <- mime(data)
ate_mime
scores <- c(64,71,73,92,75,48,75,89,67,87,68,94,91,87,83,83,70,80,83,55,76,99)
mean(scores)
median(scores)
glm(A ~ X + Z, data=data, family='binomial')
glm(A ~ W + Z, data=data, family='binomial')
glm(A ~ W + Z, data=data, family='binomial')
ATE_mod
# Get weights for IPTW
ATE_mod <- simex_indirect_implement(data)
ATE_mod
# Estimate ME variance via the validation data (i.e. sd of X-W in val data)
# Note: should be fine to do it this way since we're assuming non-dif/classical
# but may need to explore extensions
sig_u_hat <- sd(data$X[which(data$v_idx==1)] - data$W[which(data$v_idx==1)])
# Run SIMEX on PS coefficient
ps_model <- glm(A ~ W + Z, data=data, family='binomial', x=TRUE)
simex_model <- simex(model=ps_model,
SIMEXvariable = "W",
measurement.error = sig_u_hat)
#' Computes ATE under ideal conditions (using X, correctly specified model)
#'
#' Returns ATE estimate
ps_model <- glm(A ~ X + Z, data=data, family='binomial')
ps_model
w_hat <- ifelse(data$A==1,
1/e_hat,
1/(1-e_hat))
# Estimate ATE
ATE_mod <- lm(Y ~ A, weights=w_hat,data=data)
ATE_mod
# Estimate ME variance via the validation data (i.e. sd of X-W in val data)
# Note: should be fine to do it this way since we're assuming non-dif/classical
# but may need to explore extensions
sig_u_hat <- sd(data$X[which(data$v_idx==1)] - data$W[which(data$v_idx==1)])
# Run SIMEX on PS coefficient
ps_model <- glm(A ~ W + Z, data=data, family='binomial', x=TRUE)
simex_model <- simex(model=ps_model,
SIMEXvariable = "W",
measurement.error = sig_u_hat)
simex_model
# Get weights
e_hat <- predict(simex_model,type='response')
w_hat <- ifelse(data$A==1,
1/e_hat,
1/(1-e_hat))
lm(Y ~ A, weights=data$w_hat,data=data)
data$w_hat <- w_hat
# Estimate ATE
ATE_mod <- lm(Y ~ A, weights=data$w_hat,data=data)
ATE_mod
ate_simex <- simex_indirect(temp_data,nboot=0)
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
ate_simex <- simex_indirect(temp_data,nboot=0)
# sim_main.R
#
# Main file for performing simulations. User can adjust simulation parameters,
# and provide vectors corresponding to parameters if they want to perform
# simulations for different combinations of parameters
#
# Example:
#
#
#
#
# Output:
# Running this code will result in two outputs:
# 1) a csv file containing the results of performing get_results() with the
#    user-specified parameter values/combinations, named
#    "sim_resuls_<datestring>.csv", where datestring is generated with
# 2) a text file containing the specified parameter values
# ------------------------------------------------------------------------------
library(mvtnorm) # for simulating data
library(simex) # for the indirect SIMEX approach
library(tidyverse) # data manipulation/plotting
library(mice) # for multiple imputation
library(ipw) # calculating ATEs
library(AER) # for instrumental variables
library(betareg) # for using beta regression in PSC
# ------------------------------------------------------------------------------
# Set up relevant paths for output
flnm <- gsub(':','-',Sys.time()) # filename suffixed with date/time
flnm <- paste('sim_results_',gsub(' ','_',flnm),'.csv',sep = '')
simdir <- '../../output/sim_results/' # directory
fullpath <- paste(simdir,flnm,sep='') # construct path to final file name
# ------------------------------------------------------------------------------
# Set up simulation parameters
methods <- c('simex_ind')
sig_u_grid <- c(0.1,0.5,0.9) # ME variances
ba_grid <- c(1) # treatment effect
n_grid <- c(5000) # sample size
bin_grid <- c(0) # 0/1 continuous/binary
rho_grid <- c(0.2,0.8) # corr b/w x and z
psi_grid <- c(0.5) # corr b/w v and x
ax_grid <- 0.25 # coeff of x in the ps model
# ------------------------------------------------------------------------------
# Load correction/sim/output functions
source('correction_functions.R')
source('data_functions.R')
source('output_functions.R')
# ------------------------------------------------------------------------------
# Run simulations, store results
op_chars <- get_results(methods,
sig_u_grid,
ba_grid,
n_grid,
rho_grid,
psi_grid,
ax_grid,
bin_grid, nsim=50)
write.csv(op_chars, file=fullpath)
source('plotting_functions.R')
df <- op_chars
# ------------------------------------------------------------------------------
# Vary u
line_plot(df,'u','bias') # using default values
opcharspath <- "../../output/sim_results/sim_results_2022-10-24_20-59-08.csv"
df <- read.csv(opcharspath)
View(df)
opcharspath <- "../../output/sim_results/sim_results_2022-10-24_20-59-08.csv"
df <- read.csv(opcharspath)
df <- filter(method=='SIMEX')
opcharspath <- "../../output/sim_results/sim_results_2022-10-03_20-28-42.csv"
df2 <- read.csv(opcharspath)
df <- rbind(df,df2)
# Make various line plots
defaults <- c(0.5,1,5000,0,0.8,0.5,0.25)
# ------------------------------------------------------------------------------
# Vary u
line_plot(df,'u','bias') # using default values
View(df)
opcharspath <- "../../output/sim_results/sim_results_2022-10-24_20-59-08.csv"
df <- read.csv(opcharspath)
df <- filter(method=='SIMEX')
View(df)
opcharspath <- "../../output/sim_results/sim_results_2022-10-24_20-59-08.csv"
df <- read.csv(opcharspath)
df <- df %>% filter(method=='SIMEX')
View(df)
View(df2)
opcharspath <- "../../output/sim_results/sim_results_2022-10-03_20-28-42.csv"
df2 <- read.csv(opcharspath)
df <- rbind(df,df2)
# Make various line plots
defaults <- c(0.5,1,5000,0,0.8,0.5,0.25)
# ------------------------------------------------------------------------------
# Vary u
line_plot(df,'u','bias') # using default values
opcharspath <- "../../output/sim_results/res_merged.csv"
write.csv(df,opcharspath)
# testing AIPW
aipw_test <- aipw(data)
# Outcome model
y <- data$Y
X <- data %>% select(W,Z,A)
outcome_model <- SuperLearner(Y=y,X=X,SL.library = methods, family=gaussian)
library(SuperLearner)
outcome_model <- SuperLearner(Y=y,X=X,SL.library = methods, family=gaussian)
methods='SL.glm'
tmt_model <- SuperLearner(Y=X$A, X=Xtilde, SL.library=methods,family=binomial())
outcome_model <- SuperLearner(Y=y,X=X,SL.library = methods, family=gaussian)
# Predict cond on A=0, A=1
rhs0 <- X %>% mutate(A=0) # scenario where all tmt vals are 0
rhs1 <- X %>% mutate(A=1) # scenario where all tmt vals are 1
yhat0 <- predict(outcome_model,newdata=rhs0,X=X,Y=y)$pred # E[Y|X,A=0]
yhat1 <- predict(outcome_model,newdata=rhs1,X=X,Y=y)$pred # E[Y|X,A=1]
# Get predicted propensity scores
Xtilde <- X %>% select(-A)
tmt_model <- SuperLearner(Y=X$A, X=Xtilde, SL.library=methods,family=binomial())
pihat <- predict(tmt_model, type='response')
aipw_calc(y,data$A,pihat,yhat0,yhat1)
data$A
y
pihat
typeof(pihat)
pihat*2
as.double(pihat)
View(pihat)
pihat <- predict(tmt_model, type='response')$pred
# Compute relevant terms for estimator
term1 <- a*y/pihat - (1-a)*y/(1-pihat)
term2 <- (x-pihat)/(pihat*(1-pihat))
term3 <- (1-pihat)*yhat1 + pihat*yhat0
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
# testing AIPW
aipw_test <- aipw(data)
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
# testing AIPW
aipw_test <- aipw(data)
aipw_test
qnorm(3)
qnorm(0.95)
rm(list=ls())
library(mvtnorm) # for simulating data
library(simex) # for the indirect SIMEX approach
library(tidyverse)
library(mice) # for multiple imputation
library(ipw)
library(AER) # for instrumental variables
library(betareg) # for using beta regression in PSC
library(SuperLearner)
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
source('data_functions.R')
source('output_functions.R')
# Simulation code
n <- 1e4 # obs
# Generate the data
data <- generate_data(n,sig_u = 0.3,binary=0,
ba=1)
# testing AIPW
aipw_test <- aipw(data)
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
# testing AIPW
aipw_test <- aipw(data)
aipw_test
ate_ideal(data)
# Code folder is root directory in case you're working interactively
source('correction_functions.R')
# testing AIPW
aipw_test <- aipw(data)
aipw_test
ate_ideal(data)
help("simex")
# Merge most recent round with previous
opcharspath <- "../../output/sim_results/res_merged.csv"
df <- read.csv(opcharspath)
# ------------------------------------------------------------------------------
# Vary u
line_plot(df,'u','bias') # using default values
line_plot(df,'u','bias',fixed_defaults=defaults) # using default values
line_plot(df,'u','ci_cov',fixed_defaults=defaults) # using default values
line_plot(df,'u','mse',fixed_defaults=defaults) # using default values
# create_plots_tables.R
#
# This file allows users to create <...>
#
#
rm(list=ls())
source('plotting_functions.R')
# Merge most recent round with previous
opcharspath <- "../../output/sim_results/res_merged.csv"
df <- read.csv(opcharspath)
# Make various line plots
defaults <- c(0.5,1,5000,0,0.8,0.5,0.25)
# ------------------------------------------------------------------------------
# Vary u
line_plot(df,'u','bias') # using default values
line_plot(df,'u','bias',fixed_defaults=defaults) # using default values
line_plot(df,'u','ci_cov',fixed_defaults=defaults) # using default values
line_plot(df,'u','mse',fixed_defaults=defaults) # using default values
# ------------------------------------------------------------------------------
# Vary rho
line_plot(df,'rho','bias',fixed_defaults=defaults)
line_plot(df,'rho','bias',fixed_defaults=c(0.9,1,5000,0,0.8,0.5,0.25))
line_plot(df,'rho','ci_cov',fixed_defaults=c(0.9,1,5000,0,0.8,0.5,0.25))
line_plot(df,'rho','mse',fixed_defaults=defaults) # using default values
help(simex)
